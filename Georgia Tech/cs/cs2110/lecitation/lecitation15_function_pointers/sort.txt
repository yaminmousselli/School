+==============================================================================+
| CS 2110 Summer 2017                                                          |
| Lecitation 15                                                                |
+==============================================================================+

Objective: Use qsort to sort arrays, and using function pointers

This is a lab where you will use qsort to sort an array of elements in
different ways.


+==============================================================================+
| Passing Functions Into Functions                                             |
+==============================================================================+

If you take a look at the man page for qsort, you will see that the fourth
parameter to qsort looks like this:

    //Paramater names don't matter, the only thing that matters is the type 
    int (*compar)(const void *, const void *)

The type of this parameter is a function pointer, which is the address of a
function. The signature of the function must match "int" as the return type,
and (const void*, const void*) as the parameter list. The way you can pass in
the address of a function is to simply use that function's name as the
parameter. For example, here is the signature of the atexit function:

    int atexit(void (*)(void));

The atexit function takes in a function pointer to a function which will be
executed on normal termination of the program. The function must be a void
function with no parameters:

void bye(void) {
    printf("Goodbye!\n");
}

int main(void) {
    atexit(bye);
    // do stuff
    return 0;
}


+==============================================================================+
| Assignment                                                                   |
+==============================================================================+

In the provided sort.c file, edit it where necessary to sort the array
appropriately. Use qsort from stdlib.h to accomplish this.

To build the application and run it:

make
./sort


+==============================================================================+
| Hints                                                                        |
+==============================================================================+

Use the man pages to see how qsort is used!
Use the man pages to see how qsort is used!
Use the man pages to see how qsort is used!
Use the man pages to see how qsort is used!

The second way you should sort the elements is alphabetically. You don't have
to write low level string comparison code to accomplish this because there's
already a function in string.h that can compare strings. It is reccommended
that you use that function in your implementation of this lab.

The third way you should sort the elements is by length, with the requirement
that names of the same length are then sorted by name. Try calling the function
you wrote in part 2 from your function for part 3!


+==============================================================================+
| Submission Instructions                                                      |
+==============================================================================+

Please submit the following file on t-square:

sort.c
